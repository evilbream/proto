// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: fs/fs.proto

package fs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileServer_ListDir_FullMethodName           = "/FileServer/ListDir"
	FileServer_GetFile_FullMethodName           = "/FileServer/GetFile"
	FileServer_PutFile_FullMethodName           = "/FileServer/PutFile"
	FileServer_UpdateFile_FullMethodName        = "/FileServer/UpdateFile"
	FileServer_CompressDirectory_FullMethodName = "/FileServer/CompressDirectory"
	FileServer_Ping_FullMethodName              = "/FileServer/Ping"
)

// FileServerClient is the client API for FileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerClient interface {
	ListDir(ctx context.Context, in *ListdirRequest, opts ...grpc.CallOption) (*ListdirResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error)
	PutFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PutFileRequest, PutFileResponse], error)
	UpdateFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*PutFileResponse, error)
	CompressDirectory(ctx context.Context, in *CompressDirectoryRequest, opts ...grpc.CallOption) (*CompressDirectoryResponse, error)
	Ping(ctx context.Context, in *PingServerRequest, opts ...grpc.CallOption) (*PingServerResponse, error)
}

type fileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerClient(cc grpc.ClientConnInterface) FileServerClient {
	return &fileServerClient{cc}
}

func (c *fileServerClient) ListDir(ctx context.Context, in *ListdirRequest, opts ...grpc.CallOption) (*ListdirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListdirResponse)
	err := c.cc.Invoke(ctx, FileServer_ListDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[0], FileServer_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileRequest, GetFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileServer_GetFileClient = grpc.ServerStreamingClient[GetFileResponse]

func (c *fileServerClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PutFileRequest, PutFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[1], FileServer_PutFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PutFileRequest, PutFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileServer_PutFileClient = grpc.ClientStreamingClient[PutFileRequest, PutFileResponse]

func (c *fileServerClient) UpdateFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*PutFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutFileResponse)
	err := c.cc.Invoke(ctx, FileServer_UpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) CompressDirectory(ctx context.Context, in *CompressDirectoryRequest, opts ...grpc.CallOption) (*CompressDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompressDirectoryResponse)
	err := c.cc.Invoke(ctx, FileServer_CompressDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) Ping(ctx context.Context, in *PingServerRequest, opts ...grpc.CallOption) (*PingServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingServerResponse)
	err := c.cc.Invoke(ctx, FileServer_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerServer is the server API for FileServer service.
// All implementations must embed UnimplementedFileServerServer
// for forward compatibility.
type FileServerServer interface {
	ListDir(context.Context, *ListdirRequest) (*ListdirResponse, error)
	GetFile(*GetFileRequest, grpc.ServerStreamingServer[GetFileResponse]) error
	PutFile(grpc.ClientStreamingServer[PutFileRequest, PutFileResponse]) error
	UpdateFile(context.Context, *PutFileRequest) (*PutFileResponse, error)
	CompressDirectory(context.Context, *CompressDirectoryRequest) (*CompressDirectoryResponse, error)
	Ping(context.Context, *PingServerRequest) (*PingServerResponse, error)
	mustEmbedUnimplementedFileServerServer()
}

// UnimplementedFileServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServerServer struct{}

func (UnimplementedFileServerServer) ListDir(context.Context, *ListdirRequest) (*ListdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedFileServerServer) GetFile(*GetFileRequest, grpc.ServerStreamingServer[GetFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileServerServer) PutFile(grpc.ClientStreamingServer[PutFileRequest, PutFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedFileServerServer) UpdateFile(context.Context, *PutFileRequest) (*PutFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedFileServerServer) CompressDirectory(context.Context, *CompressDirectoryRequest) (*CompressDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressDirectory not implemented")
}
func (UnimplementedFileServerServer) Ping(context.Context, *PingServerRequest) (*PingServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileServerServer) mustEmbedUnimplementedFileServerServer() {}
func (UnimplementedFileServerServer) testEmbeddedByValue()                    {}

// UnsafeFileServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServer will
// result in compilation errors.
type UnsafeFileServerServer interface {
	mustEmbedUnimplementedFileServerServer()
}

func RegisterFileServerServer(s grpc.ServiceRegistrar, srv FileServerServer) {
	// If the following call pancis, it indicates UnimplementedFileServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileServer_ServiceDesc, srv)
}

func _FileServer_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileServer_ListDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).ListDir(ctx, req.(*ListdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServer).GetFile(m, &grpc.GenericServerStream[GetFileRequest, GetFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileServer_GetFileServer = grpc.ServerStreamingServer[GetFileResponse]

func _FileServer_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerServer).PutFile(&grpc.GenericServerStream[PutFileRequest, PutFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileServer_PutFileServer = grpc.ClientStreamingServer[PutFileRequest, PutFileResponse]

func _FileServer_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileServer_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).UpdateFile(ctx, req.(*PutFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_CompressDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).CompressDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileServer_CompressDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).CompressDirectory(ctx, req.(*CompressDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileServer_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).Ping(ctx, req.(*PingServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServer_ServiceDesc is the grpc.ServiceDesc for FileServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileServer",
	HandlerType: (*FileServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDir",
			Handler:    _FileServer_ListDir_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _FileServer_UpdateFile_Handler,
		},
		{
			MethodName: "CompressDirectory",
			Handler:    _FileServer_CompressDirectory_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FileServer_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _FileServer_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFile",
			Handler:       _FileServer_PutFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fs/fs.proto",
}

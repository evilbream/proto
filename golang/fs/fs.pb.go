// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: fs/fs.proto

package fs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingServerRequest) Reset() {
	*x = PingServerRequest{}
	mi := &file_fs_fs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingServerRequest) ProtoMessage() {}

func (x *PingServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingServerRequest.ProtoReflect.Descriptor instead.
func (*PingServerRequest) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{0}
}

type PingServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingServerResponse) Reset() {
	*x = PingServerResponse{}
	mi := &file_fs_fs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingServerResponse) ProtoMessage() {}

func (x *PingServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingServerResponse.ProtoReflect.Descriptor instead.
func (*PingServerResponse) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{1}
}

func (x *PingServerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListdirRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Path           string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                              // The directory path to list files from
	ListDotEntries bool                   `protobuf:"varint,2,opt,name=list_dot_entries,json=listDotEntries,proto3" json:"list_dot_entries,omitempty"` // Whether to include hidden files (starting with dot)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListdirRequest) Reset() {
	*x = ListdirRequest{}
	mi := &file_fs_fs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListdirRequest) ProtoMessage() {}

func (x *ListdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListdirRequest.ProtoReflect.Descriptor instead.
func (*ListdirRequest) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{2}
}

func (x *ListdirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ListdirRequest) GetListDotEntries() bool {
	if x != nil {
		return x.ListDotEntries
	}
	return false
}

type ListdirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []string               `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Dirs          []string               `protobuf:"bytes,2,rep,name=dirs,proto3" json:"dirs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListdirResponse) Reset() {
	*x = ListdirResponse{}
	mi := &file_fs_fs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListdirResponse) ProtoMessage() {}

func (x *ListdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListdirResponse.ProtoReflect.Descriptor instead.
func (*ListdirResponse) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{3}
}

func (x *ListdirResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListdirResponse) GetDirs() []string {
	if x != nil {
		return x.Dirs
	}
	return nil
}

type GetFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                   // The file path to retrieve
	ChunkSize     *int32                 `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3,oneof" json:"chunk_size,omitempty"` // Size of each chunk to retrieve (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	mi := &file_fs_fs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{4}
}

func (x *GetFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetFileRequest) GetChunkSize() int32 {
	if x != nil && x.ChunkSize != nil {
		return *x.ChunkSize
	}
	return 0
}

type GetFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         []byte                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`                                      // The content of the file
	TotalSize     int64                  `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`            // Total size of the file
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                                   // Offset for the file content
	IsLastChunk   bool                   `protobuf:"varint,4,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`    // Indicates if this is the last chunk of the file
	ContentType   string                 `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`       // MIME type of the file
	ContentLength string                 `protobuf:"bytes,6,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"` // Total length of the file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	mi := &file_fs_fs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *GetFileResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetFileResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFileResponse) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *GetFileResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *GetFileResponse) GetContentLength() string {
	if x != nil {
		return x.ContentLength
	}
	return ""
}

type PutFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                     // The file path to save the content to
	Chunk         []byte                 `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`                                   // The content of the file
	TotalSize     int64                  `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`         // Total size of the file
	Offset        int64                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                                // Offset for the file content
	IsLastChunk   bool                   `protobuf:"varint,5,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"` // Indicates if this is the last chunk of the file
	Extension     string                 `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`                           // File extension to convert to (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutFileRequest) Reset() {
	*x = PutFileRequest{}
	mi := &file_fs_fs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileRequest) ProtoMessage() {}

func (x *PutFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileRequest.ProtoReflect.Descriptor instead.
func (*PutFileRequest) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{6}
}

func (x *PutFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PutFileRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *PutFileRequest) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *PutFileRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PutFileRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *PutFileRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type PutFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the file was successfully saved
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutFileResponse) Reset() {
	*x = PutFileResponse{}
	mi := &file_fs_fs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileResponse) ProtoMessage() {}

func (x *PutFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileResponse.ProtoReflect.Descriptor instead.
func (*PutFileResponse) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{7}
}

func (x *PutFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CompressDirectoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`           // The directory path to compress
	Algorithm     string                 `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"` // Compression algorithm (e.g., "zip", "tar")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompressDirectoryRequest) Reset() {
	*x = CompressDirectoryRequest{}
	mi := &file_fs_fs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressDirectoryRequest) ProtoMessage() {}

func (x *CompressDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CompressDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{8}
}

func (x *CompressDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CompressDirectoryRequest) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

type CompressDirectoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the compression was successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompressDirectoryResponse) Reset() {
	*x = CompressDirectoryResponse{}
	mi := &file_fs_fs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressDirectoryResponse) ProtoMessage() {}

func (x *CompressDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CompressDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{9}
}

func (x *CompressDirectoryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetRangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                             // The file path to stream
	StartByte     int64                  `protobuf:"varint,3,opt,name=start_byte,json=startByte,proto3" json:"start_byte,omitempty"` // Offset to start streaming from
	EndByte       int64                  `protobuf:"varint,4,opt,name=end_byte,json=endByte,proto3" json:"end_byte,omitempty"`       // Total length to stream
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRangeRequest) Reset() {
	*x = GetRangeRequest{}
	mi := &file_fs_fs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRangeRequest) ProtoMessage() {}

func (x *GetRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRangeRequest.ProtoReflect.Descriptor instead.
func (*GetRangeRequest) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{10}
}

func (x *GetRangeRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetRangeRequest) GetStartByte() int64 {
	if x != nil {
		return x.StartByte
	}
	return 0
}

func (x *GetRangeRequest) GetEndByte() int64 {
	if x != nil {
		return x.EndByte
	}
	return 0
}

type GetRangeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Chunk          []byte                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`                                          // The content chunk of the file
	TotalSize      int64                  `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`                // Offset for the file content
	ContentRange   string                 `protobuf:"bytes,4,opt,name=content_range,json=contentRange,proto3" json:"content_range,omitempty"`        // Content-Range header value
	PartialContent bool                   `protobuf:"varint,5,opt,name=partial_content,json=partialContent,proto3" json:"partial_content,omitempty"` // Indicates if this is a partial content response
	IsLastChunk    bool                   `protobuf:"varint,6,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`        // Indicates if this is the last chunk of the file for partial content only
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetRangeResponse) Reset() {
	*x = GetRangeResponse{}
	mi := &file_fs_fs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRangeResponse) ProtoMessage() {}

func (x *GetRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fs_fs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRangeResponse.ProtoReflect.Descriptor instead.
func (*GetRangeResponse) Descriptor() ([]byte, []int) {
	return file_fs_fs_proto_rawDescGZIP(), []int{11}
}

func (x *GetRangeResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *GetRangeResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetRangeResponse) GetContentRange() string {
	if x != nil {
		return x.ContentRange
	}
	return ""
}

func (x *GetRangeResponse) GetPartialContent() bool {
	if x != nil {
		return x.PartialContent
	}
	return false
}

func (x *GetRangeResponse) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

var File_fs_fs_proto protoreflect.FileDescriptor

const file_fs_fs_proto_rawDesc = "" +
	"\n" +
	"\vfs/fs.proto\"\x13\n" +
	"\x11PingServerRequest\".\n" +
	"\x12PingServerResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"N\n" +
	"\x0eListdirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12(\n" +
	"\x10list_dot_entries\x18\x02 \x01(\bR\x0elistDotEntries\";\n" +
	"\x0fListdirResponse\x12\x14\n" +
	"\x05files\x18\x01 \x03(\tR\x05files\x12\x12\n" +
	"\x04dirs\x18\x02 \x03(\tR\x04dirs\"W\n" +
	"\x0eGetFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\"\n" +
	"\n" +
	"chunk_size\x18\x02 \x01(\x05H\x00R\tchunkSize\x88\x01\x01B\r\n" +
	"\v_chunk_size\"\xcc\x01\n" +
	"\x0fGetFileResponse\x12\x14\n" +
	"\x05chunk\x18\x01 \x01(\fR\x05chunk\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x03R\ttotalSize\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\"\n" +
	"\ris_last_chunk\x18\x04 \x01(\bR\visLastChunk\x12!\n" +
	"\fcontent_type\x18\x05 \x01(\tR\vcontentType\x12%\n" +
	"\x0econtent_length\x18\x06 \x01(\tR\rcontentLength\"\xb3\x01\n" +
	"\x0ePutFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05chunk\x18\x02 \x01(\fR\x05chunk\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x03R\ttotalSize\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x03R\x06offset\x12\"\n" +
	"\ris_last_chunk\x18\x05 \x01(\bR\visLastChunk\x12\x1c\n" +
	"\textension\x18\x06 \x01(\tR\textension\"+\n" +
	"\x0fPutFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"L\n" +
	"\x18CompressDirectoryRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\talgorithm\x18\x02 \x01(\tR\talgorithm\"5\n" +
	"\x19CompressDirectoryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"_\n" +
	"\x0fGetRangeRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"start_byte\x18\x03 \x01(\x03R\tstartByte\x12\x19\n" +
	"\bend_byte\x18\x04 \x01(\x03R\aendByte\"\xb9\x01\n" +
	"\x10GetRangeResponse\x12\x14\n" +
	"\x05chunk\x18\x01 \x01(\fR\x05chunk\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x03R\ttotalSize\x12#\n" +
	"\rcontent_range\x18\x04 \x01(\tR\fcontentRange\x12'\n" +
	"\x0fpartial_content\x18\x05 \x01(\bR\x0epartialContent\x12\"\n" +
	"\ris_last_chunk\x18\x06 \x01(\bR\visLastChunk2\xb0\x03\n" +
	"\n" +
	"FileServer\x12,\n" +
	"\aListdir\x12\x0f.ListdirRequest\x1a\x10.ListdirResponse\x12.\n" +
	"\aGetFile\x12\x0f.GetFileRequest\x1a\x10.GetFileResponse0\x01\x12.\n" +
	"\aPutFile\x12\x0f.PutFileRequest\x1a\x10.PutFileResponse(\x01\x12/\n" +
	"\n" +
	"UpdateFile\x12\x0f.PutFileRequest\x1a\x10.PutFileResponse\x12J\n" +
	"\x11CompressDirectory\x12\x19.CompressDirectoryRequest\x1a\x1a.CompressDirectoryResponse\x12/\n" +
	"\x04Ping\x12\x12.PingServerRequest\x1a\x13.PingServerResponse\x120\n" +
	"\vGetFileInfo\x12\x0f.GetFileRequest\x1a\x10.GetFileResponse\x124\n" +
	"\tRangeFile\x12\x10.GetRangeRequest\x1a\x11.GetRangeResponse(\x010\x01B\x1fZ\x1dgithub.com/evilbream/proto/fsb\x06proto3"

var (
	file_fs_fs_proto_rawDescOnce sync.Once
	file_fs_fs_proto_rawDescData []byte
)

func file_fs_fs_proto_rawDescGZIP() []byte {
	file_fs_fs_proto_rawDescOnce.Do(func() {
		file_fs_fs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fs_fs_proto_rawDesc), len(file_fs_fs_proto_rawDesc)))
	})
	return file_fs_fs_proto_rawDescData
}

var file_fs_fs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_fs_fs_proto_goTypes = []any{
	(*PingServerRequest)(nil),         // 0: PingServerRequest
	(*PingServerResponse)(nil),        // 1: PingServerResponse
	(*ListdirRequest)(nil),            // 2: ListdirRequest
	(*ListdirResponse)(nil),           // 3: ListdirResponse
	(*GetFileRequest)(nil),            // 4: GetFileRequest
	(*GetFileResponse)(nil),           // 5: GetFileResponse
	(*PutFileRequest)(nil),            // 6: PutFileRequest
	(*PutFileResponse)(nil),           // 7: PutFileResponse
	(*CompressDirectoryRequest)(nil),  // 8: CompressDirectoryRequest
	(*CompressDirectoryResponse)(nil), // 9: CompressDirectoryResponse
	(*GetRangeRequest)(nil),           // 10: GetRangeRequest
	(*GetRangeResponse)(nil),          // 11: GetRangeResponse
}
var file_fs_fs_proto_depIdxs = []int32{
	2,  // 0: FileServer.Listdir:input_type -> ListdirRequest
	4,  // 1: FileServer.GetFile:input_type -> GetFileRequest
	6,  // 2: FileServer.PutFile:input_type -> PutFileRequest
	6,  // 3: FileServer.UpdateFile:input_type -> PutFileRequest
	8,  // 4: FileServer.CompressDirectory:input_type -> CompressDirectoryRequest
	0,  // 5: FileServer.Ping:input_type -> PingServerRequest
	4,  // 6: FileServer.GetFileInfo:input_type -> GetFileRequest
	10, // 7: FileServer.RangeFile:input_type -> GetRangeRequest
	3,  // 8: FileServer.Listdir:output_type -> ListdirResponse
	5,  // 9: FileServer.GetFile:output_type -> GetFileResponse
	7,  // 10: FileServer.PutFile:output_type -> PutFileResponse
	7,  // 11: FileServer.UpdateFile:output_type -> PutFileResponse
	9,  // 12: FileServer.CompressDirectory:output_type -> CompressDirectoryResponse
	1,  // 13: FileServer.Ping:output_type -> PingServerResponse
	5,  // 14: FileServer.GetFileInfo:output_type -> GetFileResponse
	11, // 15: FileServer.RangeFile:output_type -> GetRangeResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_fs_fs_proto_init() }
func file_fs_fs_proto_init() {
	if File_fs_fs_proto != nil {
		return
	}
	file_fs_fs_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fs_fs_proto_rawDesc), len(file_fs_fs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fs_fs_proto_goTypes,
		DependencyIndexes: file_fs_fs_proto_depIdxs,
		MessageInfos:      file_fs_fs_proto_msgTypes,
	}.Build()
	File_fs_fs_proto = out.File
	file_fs_fs_proto_goTypes = nil
	file_fs_fs_proto_depIdxs = nil
}

syntax="proto3";

option go_package = "github.com/evilbream/proto/fs";

message PingServerRequest {
}

message PingServerResponse {
    string message = 1;
}

message ListdirRequest {
    string path = 1; // The directory path to list files from
    bool list_dot_entries = 2; // Whether to include hidden files (starting with dot)
}

message ListdirResponse {
    repeated string files = 1;
    repeated string dirs = 2;
}

message GetFileRequest {
    string path = 1; // The file path to retrieve
    optional int32 chunk_size = 2; // Size of each chunk to retrieve (optional)
}

message GetFileResponse {
    bytes chunk = 1; // The content of the file
    int64 total_size = 2; // Total size of the file
    int64 offset = 3; // Offset for the file content
    bool is_last_chunk = 4; // Indicates if this is the last chunk of the file
    string content_type = 5; // MIME type of the file
    string content_length = 6; // Total length of the file
}

message PutFileRequest {
    string path = 1; // The file path to save the content to
    bytes chunk = 2; // The content of the file
    int64 total_size = 3; // Total size of the file
    int64 offset = 4; // Offset for the file content
    bool is_last_chunk = 5; // Indicates if this is the last chunk of the file
    string extension = 6; // File extension to convert to (optional)
}

message PutFileResponse {
    bool success = 1; // Indicates if the file was successfully saved
}

message CompressDirectoryRequest {
    string path = 1; // The directory path to compress
    string algorithm = 2; // Compression algorithm (e.g., "zip", "tar")
}

message CompressDirectoryResponse {
    bool success = 1; // Indicates if the compression was successful
}

message GetRangeRequest {
    string path = 1; // The file path to stream
    int64 start_byte = 3; // Offset to start streaming from
    int64 end_byte = 4; // Total length to stream
}

message GetRangeResponse {
    bytes chunk = 1; // The content chunk of the file
    int64 total_size = 2; // Offset for the file content
    string content_range = 4; // Content-Range header value
    bool partial_content = 5; // Indicates if this is a partial content response
    bool is_last_chunk = 6; // Indicates if this is the last chunk of the file for partial content only 

}

service FileServer {
    rpc Listdir(ListdirRequest) returns (ListdirResponse);
    rpc GetFile(GetFileRequest) returns (stream GetFileResponse);
    rpc PutFile(stream PutFileRequest) returns (PutFileResponse);
    rpc UpdateFile(PutFileRequest) returns (PutFileResponse); // for small text files only
    rpc CompressDirectory(CompressDirectoryRequest) returns (CompressDirectoryResponse);
    rpc Ping(PingServerRequest) returns (PingServerResponse);
    rpc GetFileInfo(GetFileRequest) returns (GetFileResponse);
    rpc RangeFile(stream GetRangeRequest) returns (stream GetRangeResponse);
}